/*
* Copyright (c) 2015 - 2016 Intel Corporation.
*
* Permission is hereby granted, free of charge, to any person obtaining
* a copy of this software and associated documentation files (the
* "Software"), to deal in the Software without restriction, including
* without limitation the rights to use, copy, modify, merge, publish,
* distribute, sublicense, and/or sell copies of the Software, and to
* permit persons to whom the Software is furnished to do so, subject to
* the following conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE
* LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
* OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

"use strict";

var exports = module.exports = {};

var mraa = require('mraa');

// devices
var buzzer, button, rotary, screen;

// pins
var buzzerPin = 6,
    buttonPin = 5,
    rotaryPin = 0,
    i2cBus = 6;

// Initialize the seeedstudio hardware devices
exports.init = function(config) {
  if (config.platform == "firmata") {
    // open connection to firmata
    mraa.addSubplatform(mraa.GENERIC_FIRMATA, "/dev/ttyACM0");

    buzzerPin += 512;
    buttonPin += 512;
    rotaryPin += 512;
    i2cBus = 512;
  }

  buzzer = new (require("jsupm_buzzer").Buzzer)(buzzerPin);
  button = new (require("jsupm_grove").GroveButton)(buttonPin);
//  rotary = new (require("jsupm_grove").GroveRotary)(rotaryPin);
  screen = new (require("jsupm_i2clcd").Jhd1313m1)(i2cBus, 0x3E, 0x62);
}

// The program handles events generated by the various connected
// hardware devices using the Node.js built-in `events` module
var events = new (require("events").EventEmitter)();
exports.events = events;

// Colors used for the RGB LED
var colors = { red: [255, 0, 0], white: [255, 255, 255], blue: [0, 0, 255], green: [0, 255, 0], 
  yellow:[255, 255, 0] };

// Sets the background color on the RGB LED
exports.color = function(string) {
  screen.setColor.apply(screen, colors[string] || colors.white);
}

// Displays a message on the RGB LED
exports.message = function(string, line) {
  // pad string to avoid display issues
  while (string.length < 16) { string += " "; }

  screen.setCursor(line || 0, 0);
  screen.write(string);
}

// Sound an audible alarm when it is time to get up
exports.buzz = function() {
  buzzer.setVolume(.75);
  buzzer.playSound(2600, 0);
}

// Turn off the audible alarm
exports.stopBuzzing = function() {
  buzzer.stopSound();
  buzzer.stopSound(); // if called only once, buzzer doesn't completely stop
}

// Loops every 100ms to check to fire a custom event with the
// latest value of the rotary dial, so we can check if has been moved
// Also checks to see if the button was pressed, so we can fire
// our custom button events if needed
exports.setupEvents = function() {
  var prev = { button: 0 };

  setInterval(function() {
    var pressed = button.value();

//    events.emit("rotary", rotary.abs_value());

    if (pressed && !prev.button) { events.emit("button-press"); }
    if (!pressed && prev.button) { events.emit("button-release"); }

    prev.button = pressed;
  }, 100);

//  events.on("rotary", adjustBrightness);
}

// Adjust the brightness of the RGB LCD
function adjustBrightness(value) {
  var start = 0,
      end = 1020,
      val = Math.floor(((value - start) / end) * 255);

  if (val > 255) { val = 255; }
  if (val < 0) { val = 0; }

//  screen.setColor(val, val, val);
}
